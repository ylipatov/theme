@use "sass:math";

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
	@return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// font-size
$browser-context: 16;
@function em($pixels, $context: $browser-context) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return math.div($pixels, $context) * 1em;
}

@function rem($pixels, $context: $browser-context) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return math.div($pixels, $context) * 1rem;
}

// Size
@function sizes($size) {
	@return if($size == 0, #{$size} !important, rem($size) !important)
}

// Replace `$search` with `$replace` in `$string`
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function get-vw($target) {
	@if (unitless($target)) {
		$target: $target * 1px;
	}
	$vw-context: (1920 * 0.01) * 1px;
	@return math.div($target, $vw-context) * 1vw;
}

@function proportions($one-value, $two-value, $new-value) {
	$percent-original-one-value: math.div($one-value, 100);
	$percent-original-proportions: math.div($two-value, $percent-original-one-value);
	$percent-new-value: math.div($new-value, 100);
	$new: round($percent-original-proportions * $percent-new-value);
	
	@return $new;
}
